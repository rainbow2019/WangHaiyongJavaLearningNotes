Java EE是十三中核心技术的综合应用：Java
数据库连接（JDBC）
命令和目录接口（JNDI）
企业Java Beans（EJB）
JavaScript Pages(Jsp)
Java Servlet
Java IDL/CORBA
Java 事务体系（JTA）/事务服务（JTS）
JavaMail和JavaBeans激活架构（JAF）
Java信使服务（JMS）
扩展标记语言（XML）

Web框架：Struts、hibernate、spring
“我亦无他，惟手熟尔”

1、JSP的概述（基本语法）
	jsp = html + java片段  + jsp标签(语法)  + javascript(css)
	Servlet 缺点：界面布局难
	Jsp 技术：界面好做、且其以Servlet为基础
	Jsp(前台：界面) + JavaBeans(后台：逻辑层) 的基础上再结合 Servlet, 就会构成 MVC 标签
	
	Jsp 标签：
		jsp基本语法：
		1)指令元素：用于从Jsp发送一个信息到容器，比如设置全局变量、文字编码、引入包等
			a. page指令
				<%@page contentType="text/html;charset=gb2312"%>   //声明是一个jsp文件，并且支持中文
			
			常用属性：language="xx"：jsp中嵌入的代码是xx，通常java
			import="包.*.类名.." 在该jsp页面引入包或者某个具体的类
			session=[true|false] 是否在jsp页面给你获取session对象，默认为true
			buffer=[none|8k|指定大小]  给out对象使用的缓冲区是多大，默认是8k
			autoFlash=[true|false]  当buffer满后，是否自动刷新到浏览器，默认是true
			isThreadSafe=[true|false]  默认为true，表示该jsp的线程安全由程序员控制，false则对应的servlet将实现线程安全接口
			pageEncoding="编码方式"			
			contentType="text/html;charset=gb2312"

			b. include指令：引入一个文件，通常是jsp文件，jsp引擎将两个jsp文件翻译成一个servlet文件
				<%@include file="filename"%>
			
			c. taglib指令:这个指令允许Jsp页面使用自定义标签
				<myTag:yourTag unml="123">
		2)脚本元素：在一定程度上可以理解为java片段
			a. script  <% java 代码  %>
			b. 表达式    <%=java表达式%> <%=rs.getString(1)%>
			c.declaration声明：定义变量
				<%!变量声明 %> 比如：<%! int count = 10%>
				<%!函数声明%>  比如：
					<%! int why(int num){    //定义servlet成员函数
						int result = 0;
						for(int i=0;i<num;i++){
							result += i;
						}
					}
					%>
			注：a. 在java片段定义变量时，该变量则是局部变量
				b. 而在声明中定义的变量，则该变量是jsp对应的servlet成员变量,即全局变量
				c. jsp本质是一个类函数
				
		3)动作元素：动作元素是使用xml语法写的，是jsp规定的一系列标准动作，在容器处理jsp时，或当容器遇到动作元素时，就执行相应的操作
			a. <jsp:useBean>  //创建一个javabean实例
			b. <jsp:setProperty>  //给一个javabean实例设置初始值
			c. <jsp:param>   //给一个jsp设置参数，常常与<jsp:include>结合使用
				<jsp:include file="info.jsp">
					<jsp:param name="parameter1" value="parameterValue"/>
					<jsp:param name="parameter2" value="parameterValue"/>
				</jsp:include>
			d. <jsp:getProperty>  //取得一个javabean实例的成员变量
			e. <jsp:include>   //动态引入另外一个文件
				<jsp:include page="xx.jsp"></jsp:include> 动态引入
				<%@include file="" %> 静态引入
				
				相同点：把一个文件引入到另一个文件
				区别：静态引入 --> 把两个jsp文件翻译成一个servlet，所以被引入文件不要包含<body><html>
				动态引入 --> 把两个jsp文件分别翻译，所以被引入的jsp可包含有<body><html>
				
			f. <jsp:plugin>   //使用插件
			g. <jsp:forward>   //转发
				属性：page="url" --> 直接跳转到url页面
				在开发jsp过程中，通常把jsp放入WEB-INF目录，防止用户直接访问这些jsp文件
				在WebRoot下存在一个入口页面，主要是转发即
				<jsp:forward page="url" />
			h. <jsp:fallback>  //
		4)九大内置对象：在java片段中使用
			a. out   //向客户端输出数据：字节流
				out.println("");
			b. request   //接收客户端的http请求,类似于servlet中的 HttpServletRequest
				getParameter(String name)   //name表示表单的参数名
				getParameterValues(String name)  //使用，得到的是String[]
				setAttribute(String name, Object obj)   //设置名name, 值为obj
				getAttribute(String name)   //返回name指定的属性值，如果不存在则返回null
				getCookie()
			c. response   //封装jsp产生的回应,类似于servlet中的 HttpServletResponse
				addCookie(Cookie cookie)
				sendRedirect("./welcome.jsp");
			d. session   //用于保存用户信息，跟踪用户行为; 被浏览器独占的某一内存空间
				setAttribute(String name, Object obj)
				getAttribute(String name)
				removeAttribute(String name)
			e. application   //多个用户共享该对象，可以做计数器，相当于servlet的ServletContext
			f. pageContext   //代表jsp页面的上下文
				声明周期比较短，属性值只在本页面使用
				
			g. exception   //代表运行时的一个异常
				getMessage()
			h. page   //代表jsp这个实例本身（使用较少），类似于servlet中的this
			i. config   //代表jsp对应的servlet的配置，可以得到web.xml中的参数，类似servlet的ServletConfig
			
		5)注释
			a. <!-- 注释内容 -->  html注释：在jsp编译时，可能会出现中文乱码
			b. <%-- 注释内容 --%>  jsp专用注释
		
		
		用户注册时：先在客户端进行验证（jsp正则验证），然后在服务器端进行二次验证（java正则表达式验证）
		用户登录验证分析时：应采用二次验证法，严格分析
2、JSP的运行原理
	访问jsp过程：如果是第一次访问.jsp文件会被服务器翻译成一个对应的java(servlet)文件，然后，再被翻译成.class文件,并加载到内存中，
			如果是以后访问jsp，那就直接调用内存中的jsp实例。所以第一次访问jsp慢，后面访问jsp的速度就会变快
	Jsp与servlet的关系：
		a. Jsp是以servlet为基础
		b. Jsp与servlet对应
	
	一个jsp实例：
		<%@ page contentType="text/html;charset=gb2312" %>
		<html>
			<body>
				<h1>jsp</h1>
				<%
					out.println("why!welcome");
				%>
			</body>
		</html>
	
	jsp版计算器(详情请看实例)：
		两页面：interface.jsp(界面)和result.jsp(计算)
		知识点：a. 如何接受jsp页面提交的数据，并处理
			 b. jsp中如何使用java片段
			 c. jsp中如何使用JavaScript完成对数据合法性的校验
			 
	java ee 在开发中有几个重要的开发模式
		Model1模式、model2模式、MVC模式
	
	model1模式可分为两类：
		model1（纯jsp模式）
		model1（jsp + java classes）
	
	import="java.util.*,import java.sql.*"    //引包
	
	MVC模式：界面和模型完全分离
		M: java class
		V: 视图
		C: 控制器
	
	改进方案：
		1、增加控制器servlet: 即将loginCl.jsp 用servlet代替，发挥servlet充当控制中转的优势
		2、在控制器 servlet中去调用模型model去完成用户验证，并准备要显示的用户信息数据
		
	解决用户名为中文名的方式：
		1、如：//得到用户名和密码
			String username = request.getParameter("username");
			//解决用户名为中文的三种方式
			username = new String(username.getBytes("iso-8859-1"),"gb2312");
			根据上述方法建类调用方法
		2、使用过滤器来解决
		3、通过配置 server.xml 文件（但不稳定）
			<Connector>中加入   URIEncoding = "gbk"
	
	
3、JSP中如何使用JavaScript（JS）和CSS技术

4、美化管理系统界面，完善页面
	常用软件：得到延伸配置paycolor; 设置网页logo

5、时尚购物网
   a. 需求分析:
      1）系统描述（系统可以做什么）
	 
      2）角色
	 前端客户：普通用户
	 系统管理员：可细化为：商品和公告管理者、订单管理者、用户管理者
      3）用例识别
	 在角色的基础上，可以识别出与角色相关的用例	

      模块设计：列出相关功能列表

      需求分析-->用例图(流程图，uml.rose)-->模块功能设计(将各模块功能细化)
   
   b. 系统结构分析
      设计模式：MVC，采用架构
      项目中的M、V、C
      WEB服务器：Tomcat
      数据库：MySQL
   c. 数据库设计
   d. 网站总体设计


   界面设计方式：
      1）div + css布局
      2）table + css布局
      3）混合布局：两种分时合用

   网站数据库初步设计：
      1）先初步设计，然后完善：步步为营
      2）

   设计方式：模范某网站分析 --> 创新

   做项目的步骤：
       1、界面（模仿）
       2、数据库（表的设计）[界面（功能）--> 猜表]
	  用户表和商品表
       3、建立web工程：Shopping
       4、主页面(index.jsp):界面使用DW，界面先是静态的，而后使用数据库分析
       	  在DW中，建立HTML  --> 然后在MyEclipse中建立jsp
	  	
	  开发界面时，使用table + css 方式布局
	  在table + css布局中，常用技巧是行中加入表格，做精确的布局
	  
          CSS是层叠样式表：控制网页字体、颜色、大小、背景、边框等
	  

	JavaScript返回原页面：window.open(url)，默认open函数是打开一个新页面，如果在后面加"_self"

	解决中文乱码：request.setCharacterEncoding(编码方式);   //编码方式：utf-8、gbk、gb2312
